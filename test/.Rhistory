gene.list$gene.dat$c_index=as.integer(gene.list$gene.dat$c_index)
gene.list$aux_c_index = as.integer(gene.list$aux_c_index)
gene.list
},
trna.dat,simulation.type,BIS,GMT,MES,
mc.cores=n.cores,mc.preschedule=TRUE)
num.genes = length(genome)
##########################################################################################
# Step 2) USE SIMULATED SEQUENCE--SET THE OBSERVED SEQUENCE = INITIAL BURNED IN SEQUENCE #
##########################################################################################
if(simulate.dataset){
genome = lapply(genome, function(gene){gene$gene.dat$c_index[-length(gene$gene.dat$c_index)] =gene$aux_c_index;gene})#
}
###################################
# Step 3) Guess phi based on SCUO #
###################################
phi.dat = guess.phi.scuo(genome,trna.dat)
#Set the phi value in the genome data structure
#set up mcmc data structure
MCMC = list(aux=list(),phi=list(),trna=list())
MCMC$aux = list(BIS=BIS,MES=MES,GMT=GMT)
MCMC$phi = list(prop.mean = phi.dat,
prop.var = phi.dat,
prop.type = proposal.type,
accept.history = matrix(0,50,length(genome)) #this records the last 50 accept/rejections\
)
i=0
i=i+1
i=1
if(MCMC$phi$prop.type == 'LN'){ #Lognormal Distribution has symmetric q'/q
P.log.phi = rnorm(1,mean=log(MCMC$phi$prop.mean[i]),sd=MCMC$phi$prop.var[i])
P.phi = exp(P.log.phi)
mh.ratio = 1 #metropolis-hastings ratio -- symmetric jumping distribution
}else if(MCMC$phi$prop.type == 'RN'){ #Reflecting Normal also has symmetric q'/q
P.phi = rnorm(1,mean=MCMC$phi$prop.mean[i],sd=MCMC$phi$prop.var[i])
if(P.phi<0) P.phi=-P.phi #reflecting normal distribution
mh.ratio = 1 #metropolis-hastings ratio -- symmetric jumping distribution
}else{
error(paste('Error in SempprExchange.main.R: Invalid phi proposal type',proposal.type))
}
prior.ratio = 1 #assume flat prior - this will be replaced by s and k
#prior.ratio = phi.prior(P.phi,pop.parms$s,pop.parms$k)/phi.prior(MCMC$phi$prop.mean[i],pop.parms$s,pop.parms$k)
#2) Generate auxiliary variable (simulate codon sequence)
#      Russ thinks we need to start at a random sequence to make
#      sure our samples are exact and independent like the
#      exchange algorithm requires, but it takes a very long time to burn in a random sequence
#      for a high expression gene, so it isn't feasable to do so. Starting from the previous sequence
#      assures that the aux variable is burned in and that we are pulling from the steady-state
#      distribution. It also save a shitload of computational time. I compared the two approaches
#      and verified they produce the same results.
#gene.list$aux_c_index <- rand.seq(gene.list,trna.dat)
#FIXME: I want to start from the previously accepted aux sequence, but I need
#       a way to keep track of it outside of this function. Maybe I need to
#       make a global structure and put it inside that.
MCMC$aux$BIS
MCMC$aux$GMT
MCMC$aux$MES
MCMC$aux = list(BIS=BIS,MES=MES,GMT=GMT,simulation.type=simulation.type)
MCMC$aux$simulation.type
aux_c_index <- simulate.sequence(phi=P.phi,
c_index=genome[[i]]$gene.dat$c_index,
trna.dat=trna.dat,
BIS=MCMC$aux$BIS,
GMT=MCMC$aux$GMT,
MES=MCMC$aux$MES,
SIMULATION.METHOD=MCMC$aux$simulation.type)
#3) Calculate acceptance rate
eta_obs = calc.eta.NSE(codon_index=gene.list$gene.dat$c_index,trna.dat,pop.parms)
eta_aux = calc.eta.NSE(gene.list$aux_c_index,trna.dat,pop.parms)
eta_obs = calc.eta.NSE(codon_index=genome[[i]]$gene.dat$c_index,trna.dat,pop.parms)
eta_aux = calc.eta.NSE(ux_c_index,trna.dat,pop.parms)
eta_aux = calc.eta.NSE(aux_c_index,trna.dat,pop.parms)
delta.eta = eta_obs - eta_aux
accept.ratio = exp(pop.parms$Q*pop.parms$Ne*delta.eta*(gene.list$phi.value - P.phi))*
prior.ratio*
mh.ratio
aux_c_index <- simulate.sequence(phi=P.phi,
c_index=genome[[i]]$gene.dat$c_index,
trna.dat=trna.dat,
BIS=MCMC$aux$BIS,
GMT=MCMC$aux$GMT,
MES=MCMC$aux$MES,
SIMULATION.METHOD=MCMC$aux$simulation.type)
#3) Calculate acceptance rate
#delta eta is defined as eta_obs - eta_aux
eta_obs = calc.eta.NSE(codon_index=genome[[i]]$gene.dat$c_index,trna.dat,pop.parms)
eta_aux = calc.eta.NSE(aux_c_index,trna.dat,pop.parms)
delta.eta = eta_obs - eta_aux
#NOTE: Mu cancels out of this acceptance ratio
accept.ratio = exp(pop.parms$Q*pop.parms$Ne*delta.eta*(MCMC$phi$curr.phi[i] - P.phi))*
prior.ratio*
mh.ratio
accept.ratio
exp(pop.parms$Q*pop.parms$Ne*delta.eta*(MCMC$phi$curr.phi[i] - P.phi))
P.phi
MCMC$phi$curr.phi[i]
MCMC = list(aux=list(),phi=list(),trna=list())
MCMC$aux = list(BIS=BIS,MES=MES,GMT=GMT,simulation.type=simulation.type)
MCMC$phi = list(curr.phi = phi.dat,
prop.var = phi.dat,
prop.type = proposal.type,
accept.history = matrix(0,50,length(genome)) #this records the last 50 accept/rejections\
)
exp(pop.parms$Q*pop.parms$Ne*delta.eta*(MCMC$phi$curr.phi[i] - P.phi))
accept.ratio = exp(pop.parms$Q*pop.parms$Ne*delta.eta*(MCMC$phi$curr.phi[i] - P.phi))*
prior.ratio*
mh.ratio
accept.ratio
if(runif(1) < accept.ratio){
step.phi = P.phi
}else{
step.phi = MCMC$phi$curr.phi[i]
}
step.phi
rm(list=ls())
out.prefix='output/';pop.parms=list(Q = 1, Ne = 1, A1 = 4, A2 =4);min.num.steps=500;max.num.steps=3000;BIS=4;GMT=0;MES=0;proposal.type = 'RN';simulation.type = 'M';  n.cores = 2; simulate.dataset=TRUE;
setwd('WorkingCopies/ces3/branches/exchange_elpr/R/')
load('../data/subset_100genes.Rda')
load('../data/trna.CETS.flatmut.Rda')
obs.genome=list(glf.test.100[[99]],glf.test.100[[100]])
#load required libraries and files
require(multicore)
source('../R/simulate.sequence.R')
source('../R/SE.gen.seq.R')
source('../R/calc.eta.NSE.R')
source('../R/SE.calcMu.R')
source('../R/SE.gelman.conv.R')
source('../R/calcScuo.R')
source('../R/guess.phi.scuo.R')
source('../R/update.phi.all.genes.R')
source('../R/update.phi.one.gene.R')
dyn.load('../src/exchange_NSE.so')
genome = mclapply(obs.genome,
function(gene.list,trna.dat,simulation.type,BIS,GMT,MES)
{
gene.list$aux_c_index = simulate.sequence(phi=gene.list$phi.obs,c_index=gene.list$gene.dat$c_index,trna.dat=trna.dat,BIS=10*BIS,GMT=GMT,MES=MES,SIMULATION.METHOD=simulation.type);
gene.list$gene.dat$codon=NULL        # These next few lines reduce
gene.list$gene.dat$aa=NULL           # the size of the genome object
gene.list$gene.dat$elong_rate=NULL;
gene.list$gene.dat$mut_rate=NULL
gene.list$gene.dat$count=NULL
gene.list$gene.dat$c_index=as.integer(gene.list$gene.dat$c_index)
gene.list$aux_c_index = as.integer(gene.list$aux_c_index)
gene.list
},
trna.dat,simulation.type,BIS,GMT,MES,
mc.cores=n.cores,mc.preschedule=TRUE)
num.genes = length(genome)
if(simulate.dataset){
genome = lapply(genome, function(gene){gene$gene.dat$c_index[-length(gene$gene.dat$c_index)] =gene$aux_c_index;gene})#
}
phi.dat = guess.phi.scuo(genome,trna.dat)
MCMC = list(aux=list(),phi=list(),trna=list())
MCMC$aux = list(BIS=BIS,MES=MES,GMT=GMT,simulation.type=simulation.type)
MCMC$phi = list(curr.phi = phi.dat,
prop.var = phi.dat,
prop.type = proposal.type,
accept.history = matrix(0,50,length(genome)) #this records the last 50 accept/rejections\
)
i=0
i=i+1
step.phi = update.phi.all.genes(genome,trna.dat,pop.parms,MCMC,n.cores=n.cores)
if(parallel=='mclapply'){
if(length(genome)/n.cores < 5){
mc.preschedule=FALSE
}else{
mc.preschedule=TRUE
}
step.phi = as.numeric(mclapply(genome,
update.phi.one.gene,
trna.dat,
pop.parms,
MCMC,
mc.cores=n.cores,
mc.preschedule=mc.preschedule))
#Note: mc.preschedule = TRUE may work better when the num.gene/n.cores ratio is large
#
#      mc.preschedule = FALSE may work better when there are only ~5 genes per core
}else{
stop(paste('Function update.phi.all.genes does not support parallelization of type ','\"',parallel,'\"',sep=''))
}
parallel='mclapply'
if(parallel=='mclapply'){
if(length(genome)/n.cores < 5){
mc.preschedule=FALSE
}else{
mc.preschedule=TRUE
}
step.phi = as.numeric(mclapply(genome,
update.phi.one.gene,
trna.dat,
pop.parms,
MCMC,
mc.cores=n.cores,
mc.preschedule=mc.preschedule))
#Note: mc.preschedule = TRUE may work better when the num.gene/n.cores ratio is large
#
#      mc.preschedule = FALSE may work better when there are only ~5 genes per core
}else{
stop(paste('Function update.phi.all.genes does not support parallelization of type ','\"',parallel,'\"',sep=''))
}
source('~/WorkingCopies/ces3/branches/exchange_elpr/R/update.phi.all.genes.R', echo=TRUE)
if(parallel=='mclapply'){
if(length(genome)/n.cores < 5){
mc.preschedule=FALSE
}else{
mc.preschedule=TRUE
}
step.phi = as.numeric(mclapply(X=genome,
FUN = update.phi.one.gene,
trna.dat,
pop.parms,
MCMC,
mc.cores=n.cores,
mc.preschedule=mc.preschedule))
#Note: mc.preschedule = TRUE may work better when the num.gene/n.cores ratio is large
#
#      mc.preschedule = FALSE may work better when there are only ~5 genes per core
}else{
stop(paste('Function update.phi.all.genes does not support parallelization of type ','\"',parallel,'\"',sep=''))
}
mclapply(X=genome,
FUN = update.phi.one.gene,
trna.dat,
pop.parms,
MCMC,
mc.cores=n.cores,
mc.preschedule=mc.preschedule)
as.numeric(lapply(X=genome,
FUN = update.phi.one.gene,
trna.dat,
pop.parms,
MCMC))
if(parallel=='mclapply'){
if(length(genome)/n.cores < 5){
mc.preschedule=FALSE
}else{
mc.preschedule=TRUE
}
step.phi = as.numeric(lapply(X=1:length(genome),
FUN = update.phi.one.gene,
genome,
trna.dat,
pop.parms,
MCMC)),
mc.cores=n.cores,
mc.preschedule=mc.preschedule))
#Note: mc.preschedule = TRUE may work better when the num.gene/n.cores ratio is large
#
#      mc.preschedule = FALSE may work better when there are only ~5 genes per core
}else{
stop(paste('Function update.phi.all.genes does not support parallelization of type ','\"',parallel,'\"',sep=''))
}
step.phi = as.numeric(mclapply(X=1:length(genome),
FUN = update.phi.one.gene,
genome,
trna.dat,
pop.parms,
MCMC,
mc.cores=n.cores,
mc.preschedule=mc.preschedule))
if(parallel=='mclapply'){
if(length(genome)/n.cores < 5){
mc.preschedule=FALSE
}else{
mc.preschedule=TRUE
}
step.phi = as.numeric(mclapply(X=1:length(genome),
FUN = update.phi.one.gene,
genome,
trna.dat,
pop.parms,
MCMC,
mc.cores=n.cores,
mc.preschedule=mc.preschedule))
#Note: mc.preschedule = TRUE may work better when the num.gene/n.cores ratio is large
#
#      mc.preschedule = FALSE may work better when there are only ~5 genes per core
}else{
stop(paste('Function update.phi.all.genes does not support parallelization of type ','\"',parallel,'\"',sep=''))
}
source('~/WorkingCopies/ces3/branches/exchange_elpr/R/update.phi.all.genes.R', echo=TRUE)
step.phi = update.phi.all.genes(genome,trna.dat,pop.parms,MCMC,n.cores=n.cores)
phi.dat = rbind(phi.dat,step.phi)
MCMC$phi$accept.history[i%%50,] = which(phi.dat[i+1,]!=phi.dat[i]) #current row is i+1 since we started with scuo guess
MCMC$phi$curr.phi = phi.dat[i+1,]
if(i%%50==0){
accept.rate = sum(MCMC$phi$accept.history)/50
j=which(accept.rate > 0.45) #if accept rate is too big, make jumps bigger
MCMC$phi$prop.var[j] = MCMC$phi$prop.var[j]*1.1
j=which(accept.rate < 0.35) #if accept rate is too small, make jumps smaller
MCMC$phi$prop.var[j] = MCMC$phi$prop.var[j]/1.1
}
if(i%%50==0 && i>=min.num.steps){
j=1
if(length(genome)>1){
while(j <=length(genome)){
#cat(paste('j',j,'length',length(genome),'col',ncol(phi.dat),'\n'))
R.hat=gelman.conv(phi.dat[,j])$R.hat
if(j>1 && !is.na(R.hat) && R.hat<1.1){
genome[[j]]$phi.trace = phi.dat[,j]
phi.dat=phi.dat[,-j];
genome.end[[length(genome.end)+1]]=genome[[j]]
genome[[j]]=NULL
}else{
j=j+1
}
}
}else{
R.hat=gelman.conv(phi.dat)$R.hat
if(!is.na(R.hat)&&R.hat<1.1){
genome[[1]]$phi.trace = phi.dat
genome.end[[length(genome.end)+1]]=genome[[1]]
genome[[j]]=NULL
}
}
}
while(i<max.num.steps&&length(genome)>0){
i=i+1
######################################
# Step 4.1) Update phi for each gene #
######################################
step.phi = update.phi.all.genes(genome,trna.dat,pop.parms,MCMC,n.cores=n.cores)
#Save phi values for this step
phi.dat = rbind(phi.dat,step.phi)
#Update MCMC info
MCMC$phi$accept.history[i%%50,] = which(phi.dat[i+1,]!=phi.dat[i]) #current row is i+1 since we started with scuo guess
MCMC$phi$curr.phi = phi.dat[i+1,]
#Adjust the proposal variance every 50 steps
if(i%%50==0){
accept.rate = sum(MCMC$phi$accept.history)/50
j=which(accept.rate > 0.45) #if accept rate is too big, make jumps bigger
MCMC$phi$prop.var[j] = MCMC$phi$prop.var[j]*1.1
j=which(accept.rate < 0.35) #if accept rate is too small, make jumps smaller
MCMC$phi$prop.var[j] = MCMC$phi$prop.var[j]/1.1
}
#4.3) Test for convergence using gelman convergence criteria.
#     If phi has converged for a gene, move the gene
#     from genome to genome.end so mclapply will skip gene. Also remove
#     the gene's phi trace from phi.dat
#cat(paste('i',i,'length',length(genome),'\n'))
if(i%%50==0 && i>=min.num.steps){
j=1
if(length(genome)>1){
while(j <=length(genome)){
#cat(paste('j',j,'length',length(genome),'col',ncol(phi.dat),'\n'))
R.hat=gelman.conv(phi.dat[,j])$R.hat
if(j>1 && !is.na(R.hat) && R.hat<1.1){
genome[[j]]$phi.trace = phi.dat[,j]
phi.dat=phi.dat[,-j];
genome.end[[length(genome.end)+1]]=genome[[j]]
genome[[j]]=NULL
}else{
j=j+1
}
}
}else{
R.hat=gelman.conv(phi.dat)$R.hat
if(!is.na(R.hat)&&R.hat<1.1){
genome[[1]]$phi.trace = phi.dat
genome.end[[length(genome.end)+1]]=genome[[1]]
genome[[j]]=NULL
}
}
}
}
phi.dat[i+1,]!=phi.dat[i]
rbind(step.phi,step.phi)
phi.dat
out.prefix='output/';pop.parms=list(Q = 1, Ne = 1, A1 = 4, A2 =4);min.num.steps=500;max.num.steps=3000;BIS=4;GMT=0;MES=0;proposal.type = 'RN';simulation.type = 'M';  n.cores = 2; simulate.dataset=TRUE;
setwd('WorkingCopies/ces3/branches/exchange_elpr/R/')
load('../data/subset_100genes.Rda')
load('../data/trna.CETS.flatmut.Rda')
obs.genome=list(glf.test.100[[99]],glf.test.100[[100]])
rm(list=ls())
out.prefix='output/';pop.parms=list(Q = 1, Ne = 1, A1 = 4, A2 =4);min.num.steps=500;max.num.steps=3000;BIS=4;GMT=0;MES=0;proposal.type = 'RN';simulation.type = 'M';  n.cores = 2; simulate.dataset=TRUE;
setwd('WorkingCopies/ces3/branches/exchange_elpr/R/')
load('../data/subset_100genes.Rda')
load('../data/trna.CETS.flatmut.Rda')
obs.genome=list(glf.test.100[[99]],glf.test.100[[100]])
require(multicore)
source('../R/simulate.sequence.R')
source('../R/SE.gen.seq.R')
source('../R/calc.eta.NSE.R')
source('../R/SE.calcMu.R')
source('../R/SE.gelman.conv.R')
source('../R/calcScuo.R')
source('../R/guess.phi.scuo.R')
source('../R/update.phi.all.genes.R')
source('../R/update.phi.one.gene.R')
dyn.load('../src/exchange_NSE.so')
genome = mclapply(obs.genome,
function(gene.list,trna.dat,simulation.type,BIS,GMT,MES)
{
gene.list$aux_c_index = simulate.sequence(phi=gene.list$phi.obs,c_index=gene.list$gene.dat$c_index,trna.dat=trna.dat,BIS=10*BIS,GMT=GMT,MES=MES,SIMULATION.METHOD=simulation.type);
gene.list$gene.dat$codon=NULL        # These next few lines reduce
gene.list$gene.dat$aa=NULL           # the size of the genome object
gene.list$gene.dat$elong_rate=NULL;
gene.list$gene.dat$mut_rate=NULL
gene.list$gene.dat$count=NULL
gene.list$gene.dat$c_index=as.integer(gene.list$gene.dat$c_index)
gene.list$aux_c_index = as.integer(gene.list$aux_c_index)
gene.list
},
trna.dat,simulation.type,BIS,GMT,MES,
mc.cores=n.cores,mc.preschedule=TRUE)
num.genes = length(genome)
phi.dat = guess.phi.scuo(genome,trna.dat)
MCMC = list(aux=list(),phi=list(),trna=list())
MCMC$aux = list(BIS=BIS,MES=MES,GMT=GMT,simulation.type=simulation.type)
MCMC$phi = list(curr.phi = phi.dat,
prop.var = phi.dat,
prop.type = proposal.type,
accept.history = matrix(0,50,length(genome)) #this records the last 50 accept/rejections\
)
i=0
i=i+1
step.phi = update.phi.all.genes(genome,trna.dat,pop.parms,MCMC,n.cores=n.cores)
phi.dat = rbind(phi.dat,step.phi)
phi.dat
phi.dat = rbind(phi.dat,step.phi)
phi.dat
phi.dat = as.numeric(rbind(phi.dat,step.phi))
phi.dat
phi.dat = guess.phi.scuo(genome,trna.dat)
phi.dat = rbind(phi.dat,as.numeric(step.phi))
phi.dat
phi.dat = as.numeric(guess.phi.scuo(genome,trna.dat))
step.phi = update.phi.all.genes(genome,trna.dat,pop.parms,MCMC,n.cores=n.cores)
phi.dat = rbind(phi.dat,as.numeric(step.phi))
phi.dat
?rbind
phi.dat = rbind(phi.dat,step.phi)
phi.dat
phi.dat = rbind(phi.dat,step.phi)
phi.dat = rbind(phi.dat,step.phi)
phi.dat
row.names(phi.dat)
row.names(phi.dat)<-NULL
phi.dat
i=4
MCMC$phi$accept.history[i%%50,] = which(phi.dat[i+1,]!=phi.dat[i,]) #current row is i+1 since we started with scuo guess
phi.dat[i+1,]!=phi.dat[i,]
sum(phi.dat[i+1,]!=phi.dat[i,])
sum(c(TRUE,FALSE))
MCMC$phi$accept.history[i%%50,] = (phi.dat[i+1,]!=phi.dat[i,]) #current row is i+1 since we started with scuo guess
MCMC$phi$accept.history
(phi.dat[i+1,]!=phi.dat[i,])
i%%50
(phi.dat[i+1,]!=phi.dat[i,])
MCMC$phi$accept.history[i%%50,] = (phi.dat[i+1,]!=phi.dat[i,])
MCMC$phi$accept.history[i%%50,]
phi.dat[5,2]=2
MCMC$phi$accept.history[i%%50,] = (phi.dat[i+1,]!=phi.dat[i,])
MCMC$phi$accept.history[i%%50,]
na.exclude(c(NA,1,2,NA,3))
test=na.exclude(c(NA,1,2,NA,3))
test
sum(test)
test=as.numeric(na.exclude(c(NA,1,2,NA,3)))
test
phi.ID = unlist(lapply(genome,function(list)list$name))
colnames(phi.dat) <- phi.ID
phi.dat
list(BIS,GMT,MES)
list(BIS=BIS,GMT=GMT,MES=MES)
dyn.load('../src/exchange_NSE.so')
load('data/test.gene.Rda')
setwd('../test')
load('data/test.gene.Rda')
rm(list=ls())
dyn.load('../src/exchange_NSE.so')
load('data/test.gene.Rda')
load('data/test.trna.Rda')
source('../R/main.semppr.phionly.R')
library(multicore)
cat("\nObtaining samples from the posterior distribution of phi for one simulated gene...\n")
phi.dat = main.semppr.phionly(list(test.gene),trna.dat,out.prefix=NULL,n.cores=1)
phi.dat
test.gene$phi.value
rm(list=ls())
dyn.load('../src/exchange_NSE.so')
load('data/test.gene.Rda')
load('data/test.trna.Rda')
source('../R/main.semppr.phionly.R')
library(multicore)
cat("\nObtaining samples from the posterior distribution of phi for one simulated gene...\n")
phi.dat = main.semppr.phionly(list(test.gene),trna.dat,out.prefix=NULL,n.cores=1)
phi.trace = phi.dat[[1]]
phi.dat
phi.trace = phi.dat
cat("Testing if real phi lies within the 95% CR of estimated phi...      ")
CR95_phi = quantile(phi.trace[floor(length(phi.trace)/2):length(phi.trace)],probs=c(0.025,0.975))
if(test.gene$phi.value<CR95_phi[2]&&test.gene$phi.value>CR95_phi[1]){
cat("Good\n")
}else{
cat("\nReal phi did not lie within the 95% CR of estimated phi...\nTesting if real phi lies within the 99% CR of estimates phi...      ")
CR99_phi = quantile(phi.trace[floor(length(phi.trace)/2):length(phi.trace)],probs=c(0.005,0.995))
if(test.gene$phi.value<CR99_phi[2]&&test.gene$phi.value>CR99_phi[1]){
cat("Good\n")
}else{
cat("Error\nReal phi did not lie within the 99% CR of estimated phi.\nSince this process is stochastic, this error does not necessarily\nmean that the model is not working properly. Run the test case again,\nand if this error repeatedly appears, the model isn't working properly.\n")
}
}
CR95_phi = quantile(phi.trace[floor(length(phi.trace)/1.5):length(phi.trace)],probs=c(0.025,0.975))
CR99_phi = quantile(phi.trace[floor(length(phi.trace)/1.3):length(phi.trace)],probs=c(0.005,0.995))
CR95_phi = quantile(phi.trace[floor(length(phi.trace)/1.3):length(phi.trace)],probs=c(0.025,0.975))
CR95_phi = quantile(phi.trace[floor(length(phi.trace)/1.5):length(phi.trace)],probs=c(0.025,0.975))
CR99_phi = quantile(phi.trace[floor(length(phi.trace)/1.5):length(phi.trace)],probs=c(0.005,0.995))
20*3000
20*3000/(3600)
20*5000/(3600)
